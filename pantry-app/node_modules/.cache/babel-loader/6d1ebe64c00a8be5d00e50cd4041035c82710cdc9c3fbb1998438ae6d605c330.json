{"ast":null,"code":"var _jsxFileName = \"/Users/leonor/Dev/recipes/pantry-app/src/pages/IngredientsPage.jsx\",\n  _s = $RefreshSig$();\n// src/pages/IngredientsPage.jsx\nimport React, { useMemo } from \"react\";\nimport Chip from \"../components/Chip\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function IngredientsPage({\n  allIngredients,\n  ingredientCategoryMap,\n  selected,\n  toggle,\n  onClear // Clear All handler from App.jsx\n}) {\n  _s();\n  // Build: { category -> [ingredient, ...] }, sorted\n  const grouped = useMemo(() => {\n    const map = new Map(); // category -> array of names\n    for (const name of allIngredients) {\n      const cat = ingredientCategoryMap.get(name) || \"other\";\n      if (!map.has(cat)) map.set(cat, []);\n      map.get(cat).push(name);\n    }\n    // sort ingredients within each category\n    for (const arr of map.values()) arr.sort((a, b) => a.localeCompare(b));\n    // sort categories (alpha, but put \"other\" last)\n    const cats = Array.from(map.keys()).sort((a, b) => {\n      if (a === \"other\") return 1;\n      if (b === \"other\") return -1;\n      return a.localeCompare(b);\n    });\n    return {\n      map,\n      cats\n    };\n  }, [allIngredients, ingredientCategoryMap]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"page__title\",\n      children: \"Your Ingredients\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"page__hint\",\n      children: [\"Tap ingredients to toggle. Selected: \", selected.size]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ingredients-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"chip\",\n        onClick: onClear,\n        children: \"Clear All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ingredient-groups\",\n      children: grouped.cats.map(cat => {\n        const items = grouped.map.get(cat) || [];\n        return /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"ingredient-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"ingredient-group__title\",\n            children: cat\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), items.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"empty\",\n            children: \"No items.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"chips\",\n            children: items.map(name => /*#__PURE__*/_jsxDEV(Chip, {\n              active: selected.has(name),\n              onClick: () => toggle(name),\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this)]\n        }, cat, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(IngredientsPage, \"gIuKZS+YXG5kbRqC2ydYOg9cOh4=\");\n_c = IngredientsPage;\nvar _c;\n$RefreshReg$(_c, \"IngredientsPage\");","map":{"version":3,"names":["React","useMemo","Chip","jsxDEV","_jsxDEV","IngredientsPage","allIngredients","ingredientCategoryMap","selected","toggle","onClear","_s","grouped","map","Map","name","cat","get","has","set","push","arr","values","sort","a","b","localeCompare","cats","Array","from","keys","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","onClick","items","length","active","_c","$RefreshReg$"],"sources":["/Users/leonor/Dev/recipes/pantry-app/src/pages/IngredientsPage.jsx"],"sourcesContent":["// src/pages/IngredientsPage.jsx\nimport React, { useMemo } from \"react\";\nimport Chip from \"../components/Chip\";\n\nexport default function IngredientsPage({\n  allIngredients,\n  ingredientCategoryMap,\n  selected,\n  toggle,\n  onClear, // Clear All handler from App.jsx\n}) {\n  // Build: { category -> [ingredient, ...] }, sorted\n  const grouped = useMemo(() => {\n    const map = new Map(); // category -> array of names\n    for (const name of allIngredients) {\n      const cat = ingredientCategoryMap.get(name) || \"other\";\n      if (!map.has(cat)) map.set(cat, []);\n      map.get(cat).push(name);\n    }\n    // sort ingredients within each category\n    for (const arr of map.values()) arr.sort((a, b) => a.localeCompare(b));\n    // sort categories (alpha, but put \"other\" last)\n    const cats = Array.from(map.keys())\n      .sort((a, b) => {\n        if (a === \"other\") return 1;\n        if (b === \"other\") return -1;\n        return a.localeCompare(b);\n      });\n    return { map, cats };\n  }, [allIngredients, ingredientCategoryMap]);\n\n  return (\n    <div className=\"page\">\n      <h2 className=\"page__title\">Your Ingredients</h2>\n      <p className=\"page__hint\">\n        Tap ingredients to toggle. Selected: {selected.size}\n      </p>\n\n      {/* Actions */}\n      <div className=\"ingredients-actions\">\n        <button className=\"chip\" onClick={onClear}>Clear All</button>\n      </div>\n\n      {/* Grouped lists */}\n      <div className=\"ingredient-groups\">\n        {grouped.cats.map((cat) => {\n          const items = grouped.map.get(cat) || [];\n          return (\n            <section key={cat} className=\"ingredient-group\">\n              <h3 className=\"ingredient-group__title\">{cat}</h3>\n              {items.length === 0 ? (\n                <p className=\"empty\">No items.</p>\n              ) : (\n                <div className=\"chips\">\n                  {items.map((name) => (\n                    <Chip\n                      key={name}\n                      active={selected.has(name)}\n                      onClick={() => toggle(name)}\n                    >\n                      {name}\n                    </Chip>\n                  ))}\n                </div>\n              )}\n            </section>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}